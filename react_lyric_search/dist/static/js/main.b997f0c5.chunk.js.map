{"version":3,"sources":["TopSongs.js","Form.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["TopSongs","react_default","a","createElement","className","React","Component","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","lyrics","errorOccurred","video","topSongs","artistName","relatedArtists","artistID","onFormSubmit","bind","assertThisInitialized","event","_this2","preventDefault","song","target","songName","value","artist","fetch","then","response","json","responseJson","setState","catch","error","MUSIX_API_ROOT","_this$state","console","log","lyric","onSubmit","style","width","height","fontSize","padding","borderRadius","placeholder","type","id","name","fontWeight","color","fontFamily","backgroundColor","textAlign","align","src","frameBorder","allow","allowfullscreen","replace","txt","charAt","toUpperCase","substr","toLowerCase","map","index","key","href","src_TopSongs","headerStyle","background","Header","App","rel","layout_Header","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b997f0c5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TopSongs extends React.Component {\n\n  render() {\n    return (\n      <div className=\"TopSongs\">\n      </div>\n    );\n  } \n}\n\nexport default TopSongs;","import React from 'react';\nimport TopSongs from './TopSongs';\n\nconst HEROKU_API_ROOT = \"https://lyric-api.herokuapp.com/api/find/\";\nconst YOUTUBE_API_ROOT = \"https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&order=relevance&q=\";\nconst MUSIX_API_ROOT = \"https://api.musixmatch.com/ws/1.1/\"\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nclass Form extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            lyrics: [],\n            errorOccurred: false,\n            video: [],\n            topSongs: [],\n            artistName: '',\n            relatedArtists: [],\n            artistID: []\n        }\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n      }\n    \n    onFormSubmit(event) {\n        event.preventDefault();\n\n        // Get lyrics\n        const song = event.target.songName.value;\n        const artist = event.target.artistName.value;\n        const url = HEROKU_API_ROOT + artist + \"/\" + song;\n\n        fetch(url)\n        .then((response) => response.json())\n        .then((responseJson) => this.setState({\n            isLoaded: true,\n            lyrics:responseJson,\n            artistName:artist,\n            errorOccurred: false\n        }))\n        .catch(error => this.setState({ errorOccurred: true }));\n\n\n        // Get Youtube Video\n        const YOUTUBE_API_URL = YOUTUBE_API_ROOT + song + artist + \"&key=\" + process.env.REACT_APP_YOUTUBE_API_KEY;\n\n        fetch(YOUTUBE_API_URL)\n        .then((response) => response.json())\n        .then((responseJson) => this.setState({\n            isLoaded: true,\n            video: \"https://www.youtube.com/embed/\" + responseJson['items'][0]['id']['videoId'],\n            artistName:artist\n        }))\n        .catch(error => this.setState({ errorOccurred: true }));\n\n        // Get top 10 songs from artist\n        const MUSIX_API_URL = MUSIX_API_ROOT + \"track.search?q_artist=\" + artist + \"&page_size=10&page=1&s_track_rating=desc&apikey=\" + process.env.REACT_APP_MUSIX_API_KEY;\n    \n        fetch(proxyurl + MUSIX_API_URL)\n        .then((response) => response.json())\n        .then((responseJson) => this.setState({\n            isLoaded: true,\n            topSongs: responseJson['message']['body']['track_list'],\n            artistName:artist\n        }))\n        .catch(error => this.setState({ error, errorOccurred: true }))\n        \n        // Get related artists\n        // const MUSIX_API_URL_RELATED = MUSIX_API_ROOT + \"artist.related.get?artist_id=\" + artistID + \"&page_size=2&page=1&apikey=\" + MUSIX_API_KEY;\n        \n        // // Get artistid\n        // const MUSIX_API_URL_ARTISTID = MUSIX_API_ROOT + \"artist.search?q_artist=\" + artist + \"&page_size=5&apikey=\" + MUSIX_API_KEY;\n        // fetch(proxyurl + MUSIX_API_URL_ARTISTID)\n        // .then((response) => response.json())\n        // .then((responseJson) => this.setState({\n        //     artistID:responseJson['message']['body']['artist_list']['0']['artist']['artist_id']\n        // }));\n\n        // console.log(MUSIX_API_URL_RELATED)\n        // fetch(proxyurl + MUSIX_API_URL_RELATED)\n        // .then((response) => response.json())\n        // .then((responseJson) => this.setState({\n        //     isLoaded: true,\n        //     relatedArtists: responseJson['message']['body']['artist_list'],\n        // }));\n    };\n    \n      render() {\n        var {isLoaded, lyrics, video, topSongs, artistName, artistID, relatedArtists, errorOccurred} = this.state;\n        console.log(this.state)\n\n        function toTitleCase(str) {\n            return str.replace(/\\w\\S*/g, function(txt){\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n        }\n        \n        if (errorOccurred || lyrics.lyric == \"\") {\n            return (\n                <form onSubmit={ this.onFormSubmit }>\n                    <br/>\n                    <br/>\n\n                    <div className=\"gridContainer\">\n                        <div className=\"search\">\n                            <input \n                            style={{width: '50%', height: '30px', fontSize: '110%', padding:'8px', borderRadius: '25px'}}\n                            placeholder=\"   Search a song\"\n                            type=\"text\" \n                            id=\"song\" \n                            name=\"songName\" />\n\n                            <br/>\n                            <br/>\n\n                            <input \n                            style={{width: '50%', height: '30px', fontSize: '110%', padding:'8px', borderRadius: '25px'}}\n                            placeholder=\"   Search an artist\"\n                            type=\"text\" \n                            id=\"artist\" \n                            name=\"artistName\" />\n\n                            <br/>\n                            <br/>\n\n                            <button type=\"submit\" style={{ fontWeight: '900', color: '#fff', fontSize:'100%', padding:'10px', borderRadius: '280px', fontFamily:\"Verdana\", backgroundColor: '#333'}}>\n                                Search\n                            </button>\n                            <br/>\n                            <br/>\n                        </div>\n\n                        <div className=\"error\">\n                            Couldn't find a match. Try a different spelling or a different song.\n                            <br/>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (isLoaded) {\n            return (\n                <form onSubmit={ this.onFormSubmit }>\n                    <br/>\n                    <br/>\n\n                    <div className=\"gridContainer\">\n                        <div className=\"search\">\n\n                            <input \n                            style={{width: '50%', height: '30px', fontSize: '110%', padding:'8px', borderRadius: '25px'}}\n                            placeholder=\"   Search a song\"\n                            type=\"text\" \n                            id=\"song\" \n                            name=\"songName\" />\n\n                            <br/>\n                            <br/>\n\n                            <input \n                            style={{width: '50%', height: '30px', fontSize: '110%', padding:'8px', borderRadius: '25px'}}\n                            placeholder=\"   Search an artist\"\n                            type=\"text\" \n                            id=\"artist\" \n                            name=\"artistName\" />\n\n                            <br/>\n                            <br/>\n\n                            <button type=\"submit\" style={{ fontWeight: '900', color: '#fff', fontSize:'100%', padding:'10px', borderRadius: '280px', fontFamily:'Verdana', backgroundColor: '#333'}}>\n                                Search\n                            </button>\n                        </div>\n\n                        <div className=\"lyrics\">\n                            <pre style={{ fontFamily:'Verdana', fontSize: '150%', textAlign:'left'}}> \n                                {lyrics.lyric} \n                            </pre>\n                        </div>\n\n                        <div className=\"youtube\">\n                            <div>\n                                <figure>\n                                    <iframe align=\"left\" width=\"560\" height=\"315\" src={video} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n                                </figure>\n                            </div>\n                        </div>\n\n                        <div className=\"topsongs\">\n                            <ul>\n                                <h1 style={{textAlign:'center'}}>Top 10 Tracks from {toTitleCase(artistName)}</h1>\n                                {topSongs.map(function(topSongs, index){\n                                    return (\n                                        <div style={{textAlign:'left', fontSize:\"25px\"}}>\n                                            <a  \n                                            key={ index } \n                                            href={topSongs['track']['track_share_url']}>\n                                            </a>\n                                            <strong>{index+1}. </strong> \n                                            {topSongs['track']['track_name']}\n                                            <br/>\n                                            <br/>\n                                        </div>\n                                    )\n                                })}\n                            </ul>    \n                        </div> \n\n                        <div>\n                            <TopSongs />\n                        </div>     \n                        \n                    </div>\n                </form>\n            )\n        }\n        \n        else {\n            return (\n                <form onSubmit={ this.onFormSubmit }>\n                    <br/>\n                    <br/>\n\n                    <div className=\"gridContainer\">\n                        <div className=\"search\">\n                            <input \n                            style={{width: '50%', height: '30px', fontSize: '110%', padding:'8px', borderRadius: '25px'}}\n                            placeholder=\"   Search a song\"\n                            type=\"text\" \n                            id=\"song\" \n                            name=\"songName\" />\n\n                            <br/>\n                            <br/>\n\n                            <input \n                            style={{width: '50%', height: '30px', fontSize: '110%', padding:'8px', borderRadius: '25px'}}\n                            placeholder=\"   Search an artist\"\n                            type=\"text\" \n                            id=\"artist\" \n                            name=\"artistName\" />\n\n                            <br/>\n                            <br/>\n\n                            <button type=\"submit\" style={{ fontWeight: '900', color: '#fff', fontSize:'100%', padding:'10px', borderRadius: '280px', fontFamily:\"Verdana\", backgroundColor: '#333'}}>\n                                Search\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n    }\n};\n\nexport default Form;","import React from 'react';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>LyricSearch</h1>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background:'#333',\n    color:'#fff',\n    textAlign:'center',\n    padding:'5px',\n    fontFamily:'Arial'\n}\n \nexport default Header;","import React from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Header from './components/layout/Header';\n\nclass App extends React.Component {\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <link rel=\"shortcut icon\" href=\"images/musicnote.png\"/>\n        <Header />\n        <Form />\n      </div>\n    );\n  } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}